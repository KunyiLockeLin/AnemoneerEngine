#pragma once

#include <stdio.h>
#include "common/common.h"
#include <direct.h>

const std::string indent = "    ";

void AddCommentEnum(QeAssetXML& node, AeFile& file) {
    for (auto& comment : node.data->comments) {
        if (!comment.compare(0, 5, "enum ")) {
            file.addNewLine("");
            std::vector<std::string> s = ENCODE->split(comment, " ");
            std::string key = "enum " + s[2] + " {";
            file.addNewLine(key.c_str());
            for (size_t i = 3;i<s.size(); i+=2) {
                key = indent + s[i] + " = " + s[i+1] + ",";
                file.addNewLine(key.c_str());
            }
            file.addNewLine("};");
        }
    }
    for (auto next : node.data->nexts) {
        AddCommentEnum(*next, file);
    }
}

int main(int argc, char *argv[]) {
// generated_config_struct.h
    LOG("Create src\\generated_config_struct.h");
    AeFile file;
    file.open("..\\..\\src\\generated_config_struct_enum.h");
    file.addNewLine("#pragma once");
    file.addNewLine("//This file is generated by code_generator.cpp.DO NOT edit this file.");

    auto *config = AST->getXML("..\\..\\output\\data\\config.xml");

// enum gameobject
    file.addNewLine("");
    file.addNewLine("enum AE_GAMEOBJECT_TYPE {");
    std::string key = indent + "eGAMEOBJECT_";

    auto *node = config->getXMLNode("scenes");
    std::string enum_name = key + "Scene = " + node->getXMLValuei("type") + ",";
    file.addNewLine(enum_name.c_str());

    node = config->getXMLNode("objects");
    enum_name = key + "Object = " + node->getXMLValuei("type") + ",";
    file.addNewLine(enum_name.c_str());

    node = config->getXMLNode("components");
    key += "Component_";
    for (auto comp : node->data->nexts) {
        enum_name = key + comp->data->key + " = " + comp->getXMLValuei("type") + ",";
        file.addNewLine(enum_name.c_str());
    }
    file.addNewLine("};");
    // comment enum
    AddCommentEnum(*config, file);

// struct
    file.close();
    return 0;
}

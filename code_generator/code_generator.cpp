#pragma once

#include <stdio.h>
#include "common/common.h"
#include <direct.h>

const std::string indent = "    ";

void AddCommentEnum(QeAssetXML& node, AeFile& file) {
    for (auto& comment : node.data->comments) {
        if (!comment.compare(0, 5, "enum ")) {
            file.addNewLine("");
            std::vector<std::string> ss = ENCODE->split(comment, " ");
            std::string s = "enum " + ss[2] + " {";
            file.addNewLine(s.c_str());
            for (size_t i = 3; i < ss.size(); i += 2) {
                s = indent + ss[i] + " = " + ss[i + 1] + ",";
                file.addNewLine(s.c_str());
            }
            file.addNewLine("};");
        }
    }
    for (auto next : node.data->nexts) {
        AddCommentEnum(*next, file);
    }
}

std::string AddElemetArray(std::string& element_value, const std::string& type) {
    if (element_value.length() != 2) return type;

    std::string ret = "AeVector<" + type + ", " + element_value.at(1) + ">";
    return ret;
}

void AddGameObjectComponentStrcut(QeAssetXML& node, AeFile& file) {
    // struct
    file.addNewLine("");
    std::string s = "struct AeGameObjectComponent" + node.data->key + " {";
    file.addNewLine(s.c_str());
    auto* define_node = node.getXMLNode("define");

    for (auto& element : define_node->data->elements) {
        s = indent;
        if (!element.key.compare("type")) {
            s += "AE_GAMEOBJECT_TYPE ";
        } else {
            switch (element.value.at(0)) {
                case 'i':
                    s += AddElemetArray(element.value, "int");
                    break;
                case 'f':
                    s += AddElemetArray(element.value, "float");
                    break;
                case 'b':
                    s += AddElemetArray(element.value, "bool");
                    break;
                case 'e':
                    for (auto& comment : define_node->data->comments) {
                        std::vector<std::string> ss = ENCODE->split(comment, " ");
                        if (!element.key.compare(ss[1])) {
                            s += ss[2];
                            break;
                        }
                    }
                    break;
                case 's':
                    s += "std::string";
                    break;
                default:
                    break;
            }
        }
        s += (" "+ element.key + ";");
        file.addNewLine(s.c_str());
    }

    // read xml
    file.addNewLine("");
    file.addNewLine((indent + "QeAssetXML* property;").c_str());
    file.addNewLine((indent + "void read(QeAssetXML& property_) {").c_str());
    file.addNewLine((indent + indent + "property = property_;").c_str());
    file.addNewLine((indent + "}").c_str());

    file.addNewLine((indent + "void reset() { read(*property); }").c_str());
    file.addNewLine("};");
}

int main(int argc, char* argv[]) {
    // generated_config_struct.h though config.xml
    LOG("Create src\\generated_config_struct.h");
    AeFile file;
    file.open("..\\..\\src\\generated_config_struct_enum.h");
    file.addNewLine("#pragma once");
    file.addNewLine("//This file is generated by code_generator.cpp.DO NOT edit this file.");
    file.addNewLine("#include \"common/common.h\"");
    // file.addNewLine("#include <cstring>");

    auto* config = AST->getXML("..\\..\\output\\data\\config.xml");

    // enum gameobject
    file.addNewLine("");
    file.addNewLine("enum AE_GAMEOBJECT_TYPE {");
    std::string key = indent + "eGAMEOBJECT_";

    auto* node = config->getXMLNode("scenes.define");
    std::string enum_name = key + "Scene = " + node->getXMLValuei("type") + ",";
    file.addNewLine(enum_name.c_str());

    node = config->getXMLNode("objects.define");
    enum_name = key + "Object = " + node->getXMLValuei("type") + ",";
    file.addNewLine(enum_name.c_str());

    node = config->getXMLNode("components");
    key += "Component_";
    for (auto comp : node->data->nexts) {
        enum_name = key + comp->data->key + " = " + comp->getXMLValuei("define.type") + ",";
        file.addNewLine(enum_name.c_str());
    }
    file.addNewLine("};");
    // comment enum
    AddCommentEnum(*config, file);

    // struct
    node = config->getXMLNode("components");
    for (auto comp : node->data->nexts) {
        AddGameObjectComponentStrcut(*comp, file);
    }

    file.close();
    return 0;
}

#version 450
#extension GL_GOOGLE_include_directive : enable
#include "header.glsl"


layout( local_size_x = 16, local_size_y = 16) in;

struct QeVertex {
	vec4 pos;
	vec4 color;
	vec4 uv;
	vec4 normal;
	vec4 tangent;
	vec4 joint;
	vec4 weight;
};

layout( set = layoutSet_Raytracing, binding = 0 ) buffer QeModelVertex {
	QeVertex vertics[];
} modelVertics[];

layout( set = layoutSet_Raytracing, binding = 10 ) uniform QeModelData {
	mat4 model;
	mat4 joints[MAX_JOINT_NUM];
	vec4 param1; // 0: bColorMap, 1: bCubeMap, 2: bNormalMap, 3: bMetallicRoughnessMap
	vec4 param2; // 0: outlineWidth,
	QeDataMaterial mtl;
} modelDatas[];

layout (set = layoutSet_Raytracing, binding = 20, rgba8) uniform writeonly image2D resultImage;


struct QeRay {
	vec3 origin;
	vec3 direction;
};

vec3 getRayPositionByTime(QeRay ray, float t) { return ray.origin + ray.direction * t; }

struct QeRayHitRecord {
	float t;
	vec3 position;
	vec3 nomral;
};




void main() {
	ivec2 dim = imageSize(resultImage);
	vec2 uv = vec2(gl_GlobalInvocationID.xy) / dim;

	/*QeRay ray;
	ray.origin = environmentData.camera.pos_rayTracingDepth.xyz;
	ray.direction = normalize(vec3((-1.0 + 2.0 * uv) * vec2(environmentData.camera.fov_aspect_near_far.y, 1.0), -1.0));

	int id = 0;
	vec3 finalColor = renderScene(ray, id);
	*/
	imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), vec4(uv, 0.0, 1.0));
}